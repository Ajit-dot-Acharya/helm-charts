apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "spring.fullname" . }}-jmeter
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: {{ include "spring.name" . }}-jmeter
    chart: {{ include "spring.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    snappyflow/appname: {{ default .Release.Name .Values.global.sfappname }}
    snappyflow/projectname: {{ default .Release.Name .Values.global.sfprojectname }}
    snappyflow/component: jmeter
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "spring.name" . }}-jmeter
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "spring.name" . }}-jmeter
        release: {{ .Release.Name }}
        snappyflow/appname: {{ default .Release.Name .Values.global.sfappname }}
        snappyflow/projectname: {{ default .Release.Name .Values.global.sfprojectname }}
        snappyflow/component: jmeter
      annotations:
        {{ toYaml .Values.podAnnotations | indent 8 }}
    spec:
      serviceAccountName: {{ template "spring.serviceAccountName" . }}
      securityContext:
        {{ toYaml .Values.securityContext | indent 8 }}
      initContainers:
{{- if .Values.mysql.aws.enabled }}
        - name: wait-for-rds
          image: dtzar/helm-kubectl:2.14.0
          command: ['sh', '-c', 'until echo $(kubectl get secrets ${RDS_BINDING} --namespace ${SECRET_NAMESPACE}) | grep "${RDS_BINDING}"; do sleep 5 ; done']
          env:
            - name: SECRET_NAMESPACE
              value: {{ .Release.Namespace }}
            - name: RDS_BINDING
              value: {{ include "spring.fullname" . }}-rds-binding
{{- end }}
        - name: wait-for-elb
          image: dtzar/helm-kubectl:2.14.0
          command: 
            - sh
            - -c
            - -x
            -  while true; do PET_HOST=$(kubectl get svc --namespace ${SECRET_NAMESPACE} -l app=${APP_NAME},release=${RELEASE} -o jsonpath="{.items[*].status.loadBalancer.ingress[*].hostname}"); if [ "$PET_HOST" != ""  ]; then break; fi ;sleep 5;done && RESULT=$(kubectl create secret generic ${SECRET_NAME} --namespace ${SECRET_NAMESPACE} --from-literal='petclinic-host'=$PET_HOST 2>&1);EXIT_CODE=$?;echo $RESULT | grep -q \"AlreadyExists\"; if [ $? = 0 ]; then echo 0;else echo $RESULT;echo $EXIT_CODE;fi;
          env:
            - name: SECRET_NAMESPACE
              value: {{ .Release.Namespace }}
            - name: APP_NAME
              value: {{ template "spring.name" . }}
            - name: RELEASE
              value: {{ .Release.Name }}
            - name: SECRET_NAME
              value: {{ template "spring.fullname" . }}-host-secret
        - name: get-jar-files
          image: alpine
          command:
            - sh
            - -c
            - -x
            - apk add --no-cache curl && curl ${JOLOKIA_JAR_URL} -o /data/jolokia.jar && curl ${MYSQL_CONNECTOR} -o /data/mysql-connector.tar.gz && tar -zxvf /data/mysql-connector.tar.gz mysql-connector-java-8.0.18/mysql-connector-java-8.0.18.jar -C /data
          env:
            - name: JOLOKIA_JAR_URL
              value: https://repo1.maven.org/maven2/org/jolokia/jolokia-jvm/1.6.2/jolokia-jvm-1.6.2-agent.jar
            - name: MYSQL_CONNECTOR
              value: https://cdn.mysql.com//Downloads/Connector-J/mysql-connector-java-8.0.18.tar.gz
          volumeMounts:
            - name: data
              mountPath: /data
      containers:
        - name: {{ .Chart.Name }}-jmeter
          image: "{{ .Values.jmeter.image.repository }}:{{ .Values.jmeter.image.tag }}"
          imagePullPolicy: {{ .Values.jmeter.image.pullPolicy }}
          command:
            - sh 
            - -c 
            - -x 
            - cp /data/mysql-connector-java-8.0.18/mysql-connector-java-8.0.18.jar /opt/apache-jmeter-5.1.1/lib/.; cp /data/jolokia.jar /opt/apache-jmeter-5.1.1/lib/. && touch /var/log/test_plan.jtl; cd $JMETER_HOME/bin && /usr/bin/java -server $JAVA_ARGS $JVM_ARGS $JAVA_AGENT -jar $JMETER_HOME/bin/ApacheJMeter.jar -n -t /scripts/test_plan.jmx -l /var/log/test_plan.jtl -LINFO -j /var/log/jmeter.log -JPETCLINC_HOST=${PETCLINC_HOST} -JPETCLINIC_PORT=${PETCLINIC_PORT} -JMYSQL_SERVER=${DATABASE_HOST}:3306 -JMYSQL_USER=${DATABASE_USERNAME} -JMYSQL_PASSWORD=${DATABASE_PASSWORD};
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: PETCLINC_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ template "spring.fullname" . }}-host-secret
                  key: petclinic-host
            - name: PETCLINIC_PORT
              value: "{{ .Values.service.httpPort }}"
            - name: DATABASE_HOST
              {{- if .Values.mysql.aws.enabled }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "spring.fullname" . }}-rds-binding
                  key: ENDPOINT_ADDRESS
              {{- else }}
              value: {{ .Values.mysql.external.mysqlHost }}
              {{- end }}
            - name: DATABASE_NAME
              {{- if .Values.mysql.aws.enabled }}
              valueFrom:
                secretKeyRef: 
                  name: {{ include "spring.fullname" . }}-rds-binding
                  key: DB_NAME
              {{- else }}
              value: {{ .Values.mysql.external.mysqlDatabase }}
              {{- end }}
            - name: DATABASE_USERNAME
              {{- if .Values.mysql.aws.enabled }}
              valueFrom: 
                secretKeyRef:
                  name: {{ include "spring.fullname" . }}-rds-binding
                  key: MASTER_USERNAME
              {{- else }}
              value: {{ .Values.mysql.external.mysqlUser }}
              {{- end }}
            - name: DATABASE_PASSWORD
              {{- if .Values.mysql.aws.enabled }}
              valueFrom: 
                secretKeyRef: 
                  name: {{ include "spring.fullname" . }}-rds-binding
                  key: MASTER_PASSWORD
              {{- else }}
              value: {{ .Values.mysql.external.mysqlPassword }}
              {{- end }}
            - name: JMETER_HOME
              value: "/opt/apache-jmeter-5.1.1"
            - name: JVM_ARGS
              value: "-Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=0.0.0.0 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.port=5555 -Dcom.sun.management.jmxremote.rmi.port=5555 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
            - name: JAVA_ARGS
              value: "-XX:+HeapDumpOnOutOfMemoryError -Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:G1ReservePercent=20 -Djava.security.egd=file:/dev/urandom -Duser.language=en -Duser.region=EN"
            - name: JAVA_AGENT
              value: "-javaagent:/opt/apache-jmeter-5.1.1/lib/jolokia.jar=port=8778,host=0.0.0.0"
            {{- range $key, $value := .Values.jmeter.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: scripts
              mountPath: /scripts
            - name: jmeterlog
              mountPath: /var/log
          resources:
{{ toYaml .Values.jmeter.resources | indent 12 }}
{{- if .Values.jmeter.logger.enabled }}
        - name: jmeter-logger
          image:  "{{ .Values.jmeter.logger.image }}:{{ .Values.jmeter.logger.imageTag }}"
          imagePullPolicy: {{ .Values.jmeter.logger.imagePullPolicy | quote }}
          command:
          - /app/sfagent
          - -config
          - '{"key":"{{ .Values.global.key }}","logging":{"plugins":[{"name":"jmeter","enabled":true,"config":{"log_path":"/var/log/test_plan.jtl"}}]}}'
          env:
          - name: APP_NAME
            value: {{ .Values.global.sfappname }}
          - name: PROJECT_NAME
            value: {{ .Values.global.sfprojectname }}
          resources:
{{ toYaml .Values.jmeter.logger.resources | indent 12 }}
          volumeMounts:
          - name: jmeterlog
            mountPath: /var/log

{{- end }}
{{- if .Values.logrotate.enabled }}
        - name: logrotate
          image:  "{{ .Values.logrotate.image.repository }}:{{ .Values.logrotate.image.tag }}"
          imagePullPolicy: {{ .Values.logrotate.image.pullPolicy | quote }}
          env:
          {{- range $key, $value := .Values.logrotate.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
          - name: LOGS_DIRECTORIES
            value: "/var/log"
          resources:
{{ toYaml .Values.logrotate.resources | indent 12 }}
          volumeMounts:
          - name: jmeterlog
            mountPath: /var/log
{{- end }}
{{- if .Values.jmx_exporter.enabled }}
        - name: jmx-exporter
          image: "{{ .Values.jmx_exporter.image.repository }}:{{ .Values.jmx_exporter.image.tag }}"
          imagePullPolicy: {{ .Values.jmx_exporter.image.pullPolicy | quote }}
          command:
            - sh
            - -c
            - -x
            - java -jar /opt/bitnami/jmx-exporter/jmx_prometheus_httpserver.jar {{ .Values.jmx_exporter.port }} /config/jmx-config.yml
          ports:
          - name: jmx-exporter
            containerPort: {{ .Values.jmx_exporter.port }}
          volumeMounts:
            - name: jmx-exporter
              mountPath: /config/jmx-config.yml
              subPath: jmx-config.yml
          livenessProbe:
            httpGet:
              path: /metric
              port: jmx-exporter
            initialDelaySeconds: 90
            timeoutSeconds: 20
          readinessProbe:
            httpGet:
              path: /metric
              port: jmx-exporter
            initialDelaySeconds: 60
            timeoutSeconds: 20
{{- end }}
      volumes:
        - name: data
          emptyDir: {}
        - name: scripts
          configMap:
            name: {{ include "spring.fullname" . }}-scripts
        - name: jmeterlog
          emptyDir: {}
{{- if .Values.jmx_exporter.enabled }}
        - name: jmx-exporter
          configMap:
            name: {{ include "spring.fullname" . }}-jmx-exporter
{{- end }}

