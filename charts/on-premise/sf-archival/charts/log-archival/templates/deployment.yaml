apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "log-archival.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "log-archival.labels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "log-archival.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "log-archival.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        release: {{ .Release.Name }}
        {{ .Values.global.snappyflowProjectLabel}}: {{ .Values.global.snappyflowProjectName }}
        {{ .Values.global.snappyflowAppLabel }}: {{ .Values.global.snappyflowAppName }}
    spec:
    {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
        - name: db-ready
          image: "bitnami/postgresql:11.5.0-debian-9-r34"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - "until pg_isready -d postgresql://'{{ .Values.global.postgresql.postgresqlUsername }}':'{{ .Values.global.postgresql.postgresqlPassword }}'@'{{ template "log-archival.postgresql.fullname" . }}':{{ .Values.global.postgresql.servicePort }}/'{{ .Values.global.postgresql.postgresqlDatabase }}'; do sleep 3; done"
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: config-volume
            mountPath: /etc/conf
          {{- if (eq .Values.global.secrets.gcs.enable true) }}
          - name: google-cloud-key
            mountPath: /var/secrets/google
          {{- end }}
          env:
          {{- if (eq .Values.global.secrets.gcs.enable true) }}
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/secrets/google/key.json
          {{- end }}
          {{- if (eq .Values.global.secrets.aws.enable true) }}
          - name: AWS_ACCESS_KEY_ID
            value: {{ .Values.global.secrets.aws.AWS_ACCESS_KEY_ID }}
          - name: AWS_SECRET_ACCESS_KEY
            value: {{ .Values.global.secrets.aws.AWS_SECRET_ACCESS_KEY }}
          {{- end }}
          resources:
{{- toYaml .Values.containerResources.logarchival | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "log-archival.fullname" . }}
        {{- if (eq .Values.global.secrets.gcs.enable true) }}
        - name: google-cloud-key
          secret:
            secretName: {{ .Values.global.secrets.gcs.secret }}
        {{- end}}
