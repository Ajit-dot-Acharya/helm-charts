global:
  ingress:
    enabled: false

  postgresql:
    host: ""
    postgresqlDatabase: archival
    postgresqlUsername: archive
    postgresqlPassword: archive123
    servicePort: 5432

  kafkaBrokers: ""

  archival:
    enabled: true
    releaseName: archival

  sfAgentInput:
    host: 127.0.0.1
    port: 443
    scheme: https

  snappyflowProjectLabel: snappyflow/projectname
  snappyflowAppLabel: snappyflow/appname

  snappyflowProjectName: ""
  snappyflowAppName: ""

  imagePullSecrets:
  - name: xxxx

creds: "control:$apr1$pjbvxsh8$UnVE6PZ/3874l.cJ.Xc1e0"

# Pod priority class value
priority: 100

nginx-ingress:

  containerResources:
    controller:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 10m
        memory: 50Mi
    defaultBackend:
      limits:
        cpu: 25m
        memory: 50Mi
      requests:
        cpu: 10m
        memory: 25Mi
    exporter:
      limits:
        cpu: 10m
        memory: 100Mi
      requests:
        cpu: 10m
        memory: 50Mi

cp-schema-registry:

  heapOptions: "-Xms32M -Xmx256M -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:G1HeapRegionSize=1M -XX:MaxMetaspaceSize=100M -XX:MinMetaspaceFreeRatio=10 -XX:MaxMetaspaceFreeRatio=30 -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=30"

  containerResources:
    jmx:
      limits:
        cpu: 10m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 50Mi
    schemaregistry:
      limits:
        cpu: 100m
        memory: 512Mi
      requests:
        cpu: 10m
        memory: 200Mi
    schemaGenerator:
      limits:
        cpu: 100m
        memory: 512Mi
      requests:
        cpu: 10m
        memory: 25Mi

cp-kafka-rest:

  heapOptions: "-Xms210M -Xmx600M -XX:-EnableCPUMonitor -Xtune:virtualized -XX:+UseContainerSupport -XX:+CompactStrings -Xverbosegclog:/memory-util-logs/gc-logs/%seq.xml,5,20 -Xdump:system:defaults:file=/memory-util-logs/system-dumps/%seq.dmp -Xdump:heap:defaults:file=/memory-util-logs/heap-dumps/%seq.phd -Xdump:java:defaults:file=/memory-util-logs/java-dumps/%seq.txt -Xdump:system+heap+java"

  containerResources:
    restserver:
      limits:
        cpu: 500m
        memory: 896Mi
      requests:
        cpu: 50m
        memory: 600Mi
    jmx:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 100Mi

s3-kafka-connect:

  heapOptions: "-Xms350M -Xmx1G -XX:MaxDirectMemorySize=100M -XX:-EnableCPUMonitor -Xtune:virtualized -XX:+UseContainerSupport -XX:+CompactStrings -Xverbosegclog:/memory-util-logs/gc-logs/%seq.xml,5,20 -Xdump:system:defaults:file=/memory-util-logs/system-dumps/%seq.dmp -Xdump:heap:defaults:file=/memory-util-logs/heap-dumps/%seq.phd -Xdump:java:defaults:file=/memory-util-logs/java-dumps/%seq.txt -Xdump:system+heap+java"

  containerResources:
    jmx:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 100Mi
    connector:
      limits:
        cpu: 800m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi

es-kafka-connect:

  heapOptions: "-Xms525M -Xmx1536M -XX:MaxDirectMemorySize=100M -XX:-EnableCPUMonitor -Xtune:virtualized -XX:+UseContainerSupport -XX:+CompactStrings -Xverbosegclog:/memory-util-logs/gc-logs/%seq.xml,5,20 -Xdump:system:defaults:file=/memory-util-logs/system-dumps/%seq.dmp -Xdump:heap:defaults:file=/memory-util-logs/heap-dumps/%seq.phd -Xdump:java:defaults:file=/memory-util-logs/java-dumps/%seq.txt -Xdump:system+heap+java"

  containerResources:
    jmx:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 100Mi
    connector:
      limits:
        cpu: 512m
        memory: "2.5Gi"
      requests:
        cpu: 256m
        memory: "1.5Gi"

autoscaling:
  ## Auto scaling configuration
  ## Support for Kafka REST, Archivak Kafka Connect and ES Kafka Connect
  enabled: true

  ## If enabled prometheus server and adapter will be installed to serve custom
  ## metrics
  customMetrics:
    enabled: true

  archivalConnectAutoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    cpu:
      targetAverageValue: 680m # 85% of CPU limit allocated to connector
    memory:
      targetAverageValue: 1536 # MiB -> When memory utilization reaches x Mib, auto-scaling kicks in. Value should be ~75% of kafka-connect connector container memory limit

  apmConnectAutoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    cpu:
      targetAverageValue: 435m # 85% of CPU limit allocated to connector
    memory:
      targetAverageValue: 1920 # MiB -> When memory utilization reaches x Mib, auto-scaling kicks in. Value should be ~75% of kafka-connect connector container memory limit

  restKafkaAutoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    cpu:
      targetAverageValue: 450m # 90% of CPU limit allocated to rest-server
    memory:
      targetAverageValue: 762 # MiB -> When memory utilization reaches x Mib, auto-scaling kicks in. Value should be ~85% of kafka-connect connector container memory limit

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 150Mi

authenticator:

  admin:
    profileKey: admin
    userName: admin
    password: admin

  signingKey: "mysecretkey"

  containerResources:
    authenticator:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 10m
        memory: 50Mi

sfk-interface:

  containerResources:
    interface:
      limits:
        cpu: 100m
        memory: 100Mi
      requests:
        cpu: 10m
        memory: 50Mi

  cron:
    containerResources:
      limits:
        cpu: 10m
        memory: 10Mi
      requests:
        cpu: 10m
        memory: 10Mi

signatures:

  containerResources:
    signatures:
      limits:
        cpu: 50m
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 100Mi
